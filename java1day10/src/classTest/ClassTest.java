package classTest;

// 메인 클래스 별개로 한개 더 만들어 보는 거 
class Car {// public "주"가 되어야 하는 클래스가 한개는 있어야 함. 그걸 퍼블릭으로!
//	설계도 만드는 것
	String name; // 자동차 이름
	int number; // 고유번호
	
	
//	1) 멤버변수의 값을 고정하는 방법 1
	String color = "white"; //  사용자가 설정안하면 무조건 하얀색이 되게끔.
	
	
	
//	<기본 생성자>얘로 뭐하는 건데? 
	Car(){;}// 데이터를 넣어주지 않고, 그냥 객체만 만들어 둔거!
	// 초기화 생성자를 만들지 않으면, 기본 생성자는 생략이 되어 있는데, 
	// 초기화 생성자를 만들게 되면, 기본 생성자가 생략이 되어있는게, 풀리게 된다. 따라서..! 둘다 갖고 싶으면 요로케 해야함.
	
//	<초기화 생성자>( 같은 이름의 생성자 만들 수 있다. ex)회원가입, 닉네임, 생일)-메소드도 같은 이름으로 선언할 수 있다.
	//	멤버 변수 초기화가 목적임.
	//	생성자는 객체가 만들어진 위치 정보를 리턴하도록 정해져있다.
	
	//	회원가입으로 본다면, 여러가지의 경우의 수를 생성자로 만들어 둘 수 있는 것!
	// add(_ + _) 
	// add(_ + _ + _)
	// add라는 같은 이름으로 생성자를 만들 수 있다, 여기서 매개변수가 2개 넘어오면 2개짜리가, 3개가 넘어오면 3개가 실행 되는 것)
	Car (String name, int number) { // c1에 매개변수로 넘어온 이름과 숫자를 위의 설꼐도에 넘겨줄거야
		// 변수는 가장 가까운 곳에서 부터 찾느다.
		// this는 접근하는 객체의 위치 정보를 담고 있다.(자동으로 필드의 주소값이 담기게 됨)
		this.name = name;
		this.number = number;
		
//	2) 멤버변수의 값을 고정하는 방법 2	
		this.color = "white"; //
		
		
	}
}	
		//	이걸 채워 넣어서 객체를 만들 수 있게 되는 것
		//	근데 바로 쓸 수 없어서, 하나의 작업을 더 해줘야 함. => 객체화'
	
public class ClassTest {
	public static void main(String[] args) {
		Car c1 = new Car("스포티지", 1); // 생략이 되어 있어서 에러가 안난다..? 이게 무슨..
		Car c2 = new Car("테슬라", 2); 
		Car c3 = new Car(); 
//		생성자를 위에 선언하면, 생략되어 에러가 안나던게, 자기의 역할을 다해.. 에러가 나기 시작
		System.out.println(c1.name);// 22번째 줄에 c1에 저장되어 있는 쏘나타가 되는 것이다.
		System.out.println(c2.name);// ram안에 들어가서 저장되어있는 위치 정보를 내놓는 것.!
		System.out.println(c3.name);// = null 이 나오는 이유! : new가 자동으로 초기화를 해쥰것! 
//		this  의 등장 c1의 위치 정보를 담아두는 친구를 만들어 두는거 생성자를 호출한 객체의 주소가 담기는 것!!!!!!
		
	}//메인
}	